syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "BasicTypes.proto";
import "QueryHeader.proto";
import "ResponseHeader.proto";
import "Timestamp.proto";
import "Duration.proto";

/* Gets information about Token instance */
message TokenGetInfoQuery {
    QueryHeader header = 1; // Standard info sent from client to node, including the signed payment, and what kind of response is requested (cost, state proof, both, or neither)
    TokenID token = 2; // The token for which information is requested. If invalid token is provided, INVALID_TOKEN_ID response is returned.
}

/* The metadata about a Token instance */
message TokenInfo {
    TokenType tokenType = 1; // IWA compatibility. Specifies fungible or not
    TokenID tokenId = 2; // ID of the token instance
    string name = 3; // The name of the token. It is a string of ASCII only characters
    string symbol = 4; // The symbol of the token. It is a UTF-8 capitalized alphabetical string
    uint32 decimals = 5; // The number of decimal places a token is divisible by. Always 0 for tokens of type NON_FUNGIBLE. This field can never be changed!
    uint64 maxSupply = 6; // For tokens of type FUNGIBLE - The Maximum number of fungible tokens that can be in circulation. For tokens of type NON_FUNGIBLE - the maximum number of NFTs (serial numbers) that can be in circulation. This field can never be changed!
    uint64 totalSupply = 7; // The total supply of tokens that are currently in circulation
    AccountID treasury = 8; // The ID of the account which is set as Treasury
    Key adminKey = 9; // The key which can perform update/delete operations on the token. If empty, the token can be perceived as immutable (not being able to be updated/deleted)
    Key kycKey = 10; // The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required, and KYC grant or revoke operations are not possible.
    Key freezeKey = 11; // The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible
    Key wipeKey = 12; // The key which can wipe token balance of an account. If empty, wipe is not possible
    Key supplyKey = 13; // The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations
    TokenFreezeStatus defaultFreezeStatus = 14; // The default Freeze status (not applicable, frozen or unfrozen) of Hedera accounts relative to this token. FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false
    TokenKycStatus defaultKycStatus = 15; // The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable is returned if KYC key is not set, otherwise Revoked
    bool deleted = 16; // Specifies whether the token was deleted or not
    AccountID autoRenewAccount = 17; // An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval
    Duration autoRenewPeriod = 18; // The interval at which the auto-renew account will be charged to extend the token's expiry
    Timestamp expiry = 19; // The epoch second at which the token will expire
    string memo = 20; // The memo associated with the token
}

/* Response when the client sends the node TokenGetInfoQuery */
message TokenGetInfoResponse {
    ResponseHeader header = 1; // Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
    TokenInfo tokenInfo = 2; // The information requested about this token instance
}
